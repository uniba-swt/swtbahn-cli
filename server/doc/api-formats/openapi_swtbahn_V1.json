{
    "openapi": "3.0.0",
    "info": {
        "title": "SWTbahn",
        "version": "1.0.0",
        "contact": {},
        "license": {
            "name": "GPL-3.0"
        },
        "description": "SWTbahn server offering an API for interacting with an SWTbahn model railway."
    },
    "paths": {
        "/admin/startup": {
            "post": {
                "summary": "Startup the SWTbahn",
                "description": "Attempts to start up the SWTbahn to get it running; i.e., initialize connection to hardware, parse config files, and so on. This starts the server session if successful.",
                "parameters": [],
                "operationId": "admin-startup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "SWTbahn is already running",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "SWTbahn unable to startup due to internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/admin/shutdown": {
            "post": {
                "summary": "Shutdown the SWTbahn",
                "description": "Attempts to shut down the SWTbahn (if it is running); i.e., close connection to hardware, stop running internal threads, and so on. This stops the current server session if successful.",
                "parameters": [],
                "operationId": "admin-shutdown",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": []
            }
        },
        "/admin/set-track-output": {
            "post": {
                "summary": "Set the track output state",
                "description": "Set the track output state for all track outputs",
                "parameters": [],
                "operationId": "admin-set-track-output",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_state_string"
                            }
                        }
                    },
                    "description": "the state that all track outputs shall be set to"
                },
                "security": []
            }
        },
        "/admin/set-verification-option": {
            "post": {
                "summary": "Set the verification option",
                "description": "Set the verification option to true or false, i.e., enable or disable the verification of train engines when they are uploaded. Note that verification will only work if a verification url to the swtbahn-verifier (or equivalent) server has been set.",
                "parameters": [],
                "operationId": "admin-set-verification-option",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_verification-option_string"
                            }
                        }
                    },
                    "description": "the new value of the verification option (true or false)"
                },
                "security": []
            }
        },
        "/admin/set-verification-url": {
            "post": {
                "summary": "Set the verification url",
                "description": "Set the verification url, i.e., the path for the websocket connection to the verification server for train engines.",
                "parameters": [],
                "operationId": "admin-set-verification-url",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_verification-url_string"
                            }
                        }
                    },
                    "description": "the new value of the verification url (should start with ws://)"
                },
                "security": []
            }
        },
        "/admin/release-train": {
            "post": {
                "summary": "Release a train",
                "description": "Force-release a train that is currently grabbed by someone.",
                "parameters": [],
                "operationId": "admin-release-train",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid train, or train not currently grabbed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_train_string"
                            }
                        }
                    },
                    "description": "the train that shall be released"
                },
                "security": []
            }
        },
        "/admin/set-dcc-train-speed": {
            "post": {
                "summary": "Set the dcc speed of a train",
                "description": "Set the dcc speed of a train. This is set directly via bidib, i.e., it does not use the train engine dynamic container. Note that this may lead to inconsistencies/the train changing its speed to something else after this command due to a change in the output of the train engine dynamic container.",
                "parameters": [],
                "operationId": "admin-set-dcc-train-speed",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid train, invalid speed, or invalid track output",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_train_speed_trackoutput"
                            }
                        }
                    },
                    "description": "the train whose speed shall be set, the speed in the range [-126, 126] , and the track output (usually 'master')."
                },
                "security": []
            }
        },
        "/controller/release-route": {
            "post": {
                "summary": "releases a route",
                "description": "releases the specified route that is currently granted to a train",
                "parameters": [],
                "operationId": "controller-release-route",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_route-id"
                            }
                        }
                    },
                    "description": "route which shall be released."
                },
                "security": []
            }
        },
        "/controller/set-point": {
            "post": {
                "summary": "set the state/aspect of a point",
                "description": "",
                "parameters": [],
                "operationId": "controller-set-point",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_point_state"
                            }
                        }
                    },
                    "description": "point whose state shall be set, and state to set."
                },
                "security": []
            }
        },
        "/controller/set-signal": {
            "post": {
                "summary": "set the state/aspect of a signal",
                "description": "",
                "parameters": [],
                "operationId": "controller-set-signal",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_signal_state"
                            }
                        }
                    },
                    "description": "signal whose state shall be set, and state to set."
                },
                "security": []
            }
        },
        "/controller/set-peripheral": {
            "post": {
                "summary": "set the state/aspect of a peripheral",
                "description": "",
                "parameters": [],
                "operationId": "controller-set-peripheral",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_peripheral_state"
                            }
                        }
                    },
                    "description": "peripheral whose state shall be set, and state to set."
                },
                "security": []
            }
        },
        "/controller/set-interlocker": {
            "post": {
                "summary": "set the interlocker to be used by the SWTbahn",
                "description": "",
                "parameters": [],
                "operationId": "controller-set-interlocker",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter or no more free interlocker instances available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "Another interlocker is already set",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_interlocker"
                            }
                        }
                    },
                    "description": "ID of the interlocker to be used by the SWTbahn."
                },
                "security": []
            }
        },
        "/controller/unset-interlocker": {
            "post": {
                "summary": "unset the interlocker currently used by the SWTbahn",
                "description": "",
                "parameters": [],
                "operationId": "controller-unset-interlocker",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "no interlocker currently set, or currently set interlocker has a different name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_interlocker"
                            }
                        }
                    },
                    "description": "ID of the interlocker currently used by the SWTbahn that shall be unset."
                },
                "security": []
            }
        },
        "/controller/get-interlocker": {
            "get": {
                "summary": "get the ID of the interlocker currently used by the SWTbahn",
                "description": "",
                "parameters": [],
                "operationId": "controller-get-interlocker",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_get-interlocker"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "no interlocker currently set",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/driver/grab-train": {
            "post": {
                "summary": "grab a train",
                "description": "Grab a train (to take temporary ownership). If successful, a grab-id (that identifies this temporary ownership) and a session-id (server session ID to detect server restarts which invalidate train ownerships) are returned. The ownership lasts until it is released (by an admin or by the driver), or until the server session ends.",
                "parameters": [],
                "operationId": "driver-grab-train",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_grab-train"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown train or invalid train state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "Train already grabbed or max. no of grabbed trains reached",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_train_engine"
                            }
                        }
                    },
                    "description": "A train engine ID has to be specified along with the ID of the train to grab.\nThe train engine determines how the train reacts to speed and direction requests/commands sent via the appropriate API endpoint.\nThe normal train engine is called 'libtrain_engine_default (unremovable)'."
                }
            }
        },
        "/driver/release-train": {
            "post": {
                "summary": "release a train",
                "description": "Release a train that was grabbed with a specific grab-id in the current server session.",
                "parameters": [],
                "operationId": "driver-release-train",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "Train is not currently grabbed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id"
                            }
                        }
                    },
                    "description": "The grab-id has to be specified which identifies the train ownership that is to be released.\nThe session-id has to be specified to make sure this train ownership was granted in the same server session."
                }
            }
        },
        "/driver/request-route": {
            "post": {
                "summary": "request a route",
                "description": "Request a route from a source signal to a destination signal, to be driven with the grabbed train. If successful, a route is granted and its ID is returned.",
                "parameters": [],
                "operationId": "driver-request-route",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_request-route"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s), or other reason for no route being granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "Route to be granted is in conflict with other granted route or in conflict with state of the track",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_source_destination"
                            }
                        }
                    },
                    "description": "The grab-id has to be specified which identifies the train ownership, i.e., the train with which the route is to be driven.\nThe session-id has to be specified to make sure the train ownership was granted in the same server session.\nThe source (destination) signal is the start (end) of the desired route. In case of composite signals (two signals on one post/mast), usually the specific ID of the non-distant signal has to be provided."
                }
            }
        },
        "/driver/request-route-by-id": {
            "post": {
                "summary": "request a route by its ID",
                "description": "Request the route with a specific route-id, to be driven with the grabbed train. If successful, the route with the specified ID is granted.",
                "parameters": [],
                "operationId": "driver-request-route-by-id",
                "responses": {
                    "200": {
                        "description": "Success (route is granted)"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s), or other reason for no route being granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "409": {
                        "description": "Route to be granted is in conflict with other granted route or in conflict with state of the track, or route is already granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_route-id"
                            }
                        }
                    },
                    "description": "The grab-id has to be specified which identifies the train ownership, i.e., the train with which the route is to be driven.\nThe session-id has to be specified to make sure the train ownership was granted in the same server session.\nThe route-id identifies which route is being requested."
                }
            }
        },
        "/driver/direction": {
            "post": {
                "summary": "get the direction for driving a route",
                "description": "Get the direction that the specified train would need to drive (forwards or backwards) to drive along the specified route.",
                "parameters": [],
                "operationId": "driver-direction",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_direction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown route",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_train_route-id"
                            }
                        }
                    },
                    "description": "The train for which the direction is to be determined and the route-id of the route for which the driving direction is to be determined."
                }
            }
        },
        "/driver/drive-route": {
            "post": {
                "summary": "drive a route",
                "description": "Drive the specified route with the grabbed train, either in manual mode (speed controlled by driver via separate set-speed commands) or in automatic mode (train is driven automatically along the route).\nNote that this request is blocking until the route is released (either manually through appropriate command or automatically when end of the route is reached), or an internal error occurs.\nThis only works if the route is currently granted to the grabbed train.",
                "parameters": [],
                "operationId": "driver-drive-route",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_route-id_mode"
                            }
                        }
                    },
                    "description": "The session-id of the current server session. \nThe grab-id that identifies the ownership of the train with which the route is driven.\nThe route-id that identifies the route to drive.\nThe mode that specifies whether driving is manual or automatic."
                }
            }
        },
        "/driver/set-dcc-train-speed": {
            "post": {
                "summary": "set the dcc speed of a train",
                "description": "Set the requested speed (and thus also direction) of the grabbed train to a valid dcc speed. The speed request is passed to the train engine dynamic container.",
                "parameters": [],
                "operationId": "driver-set-dcc-train-speed",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_speed_track-output"
                            }
                        }
                    },
                    "description": "The session-id of the current server session. \nThe grab-id that identifies the ownership of the train whose speed is to be set.\nThe dcc speed to set.\nThe track output for which the train shall be set to the given speed (usually 'master')."
                }
            }
        },
        "/driver/set-calibrated-train-speed": {
            "post": {
                "summary": "set the speed of a train to a calibrated level",
                "description": "Sets the speed of the grabbed train to a calibrated level (levels defined in config files)(and thus also direction). In contrast to driver-set-dcc-train-speed, this bypasses the train engine dynamic container, i.e., the speed is set directly via bidib. Note that this may lead to inconsistencies/the train changing its speed to something else after this command due to a change in the output of the train engine dynamic container.",
                "parameters": [],
                "operationId": "driver-set-calibrated-train-speed",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_speed_track-output__for-calibrated-speed"
                            }
                        }
                    },
                    "description": "The session-id of the current server session. \nThe grab-id that identifies the ownership of the train whose speed is to be set.\nThe calibrated speed level to set.\nThe track output for which the train shall be set to the given speed (usually 'master')."
                }
            }
        },
        "/driver/set-train-emergency-stop": {
            "post": {
                "summary": "set a train to emergency stop",
                "description": "Emergency stops the grabbed train. This bypasses the train engine dynamic container, i.e., the emergency stop is set directly via bidib. Note that this may lead to inconsistencies/the train starting to drive again after the emergency stop due to a change in the output of the train engine dynamic container.",
                "parameters": [],
                "operationId": "driver-set-train-emergency-stop",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_track-output"
                            }
                        }
                    },
                    "description": "The session-id of the current server session. \nThe grab-id that identifies the ownership of the train which is to be stopped.\nThe track output for which the train shall be stopped (usually 'master')."
                }
            }
        },
        "/driver/set-train-peripheral": {
            "post": {
                "summary": "set the state of a train peripheral",
                "description": "Set the state of the peripheral of the grabbed train",
                "parameters": [],
                "operationId": "driver-set-train-peripheral",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid or missing parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_session-id_grab-id_peripheral_state_track-output"
                            }
                        }
                    },
                    "description": "The session-id of the current server session. \nThe grab-id that identifies the ownership of the train whose peripheral is to be set.\nThe peripheral whose state to set.\nThe state to set the peripheral to (string with '0' or '1' for on or off respectively).\nThe track output for which the train's peripheral shall be set (usually 'master')."
                }
            }
        },
        "/monitor/platform-name": {
            "get": {
                "summary": "get the name of the SWTbahn (platform) currently being operated",
                "description": "",
                "parameters": [],
                "operationId": "monitor-platform-name",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_platform-name"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/trains": {
            "get": {
                "summary": "get info of trains",
                "description": "Gets information (ID, grab status, on-track status) of trains, for all trains defined in the configuration files of the SWTbahn platform being operated",
                "parameters": [],
                "operationId": "monitor-trains",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_trains"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/train-state": {
            "post": {
                "summary": "get info on state of specific train",
                "description": "Gets information on state of a specific train",
                "parameters": [],
                "operationId": "monitor-train-state",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_train-state"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown train"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_train"
                            }
                        }
                    },
                    "description": "The name/ID of the train to get info on its state"
                }
            }
        },
        "/monitor/train-states": {
            "get": {
                "summary": "get info on state of all trains",
                "description": "Gets information on state of all trains",
                "parameters": [],
                "operationId": "monitor-train-states",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_train-states"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/train-peripherals": {
            "post": {
                "summary": "get info on peripherals of a specific train",
                "description": "",
                "parameters": [],
                "operationId": "monitor-train-peripherals",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_train-peripherals"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown train"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_train"
                            }
                        }
                    },
                    "description": "The name/ID of the train whose peripherals to get info on"
                }
            }
        },
        "/monitor/engines": {
            "get": {
                "summary": "get names of available train engines (behavior models)",
                "description": "",
                "parameters": [],
                "operationId": "monitor-engines",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_engines"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/interlockers": {
            "get": {
                "summary": "get names of available interlockers",
                "description": "",
                "parameters": [],
                "operationId": "monitor-interlockers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_interlockers"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/track-outputs": {
            "get": {
                "summary": "get names of available track ouputs",
                "description": "",
                "parameters": [],
                "operationId": "monitor-track-outputs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_track-outputs"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/points": {
            "get": {
                "summary": "get info on points",
                "description": "Get information (ID, state, and optionally whether the current target state is reached) on all points",
                "parameters": [],
                "operationId": "monitor-points",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_points"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/signals": {
            "get": {
                "summary": "get info on signals",
                "description": "Get information (ID, state) on all signals",
                "parameters": [],
                "operationId": "monitor-signals",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_signals"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/point-details": {
            "post": {
                "summary": "get detailed info on a specific point",
                "description": "",
                "parameters": [],
                "operationId": "monitor-point-details",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_point-details"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown point"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_point"
                            }
                        }
                    },
                    "description": "The name/ID of the point"
                }
            }
        },
        "/monitor/signal-details": {
            "post": {
                "summary": "get detailed info on a specific signal - NOT YET IMPLEMENTED",
                "description": "",
                "parameters": [],
                "operationId": "monitor-signal-details",
                "responses": {
                    "501": {
                        "description": "NOT YET IMPLEMENTED"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_signal"
                            }
                        }
                    },
                    "description": "The name/ID of the signal"
                }
            }
        },
        "/monitor/point-aspects": {
            "post": {
                "summary": "get info on aspects (states) a specific point supports",
                "description": "",
                "parameters": [],
                "operationId": "monitor-point-aspects",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_accessory-aspects"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown point"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_point"
                            }
                        }
                    },
                    "description": "The name/ID of the point"
                }
            }
        },
        "/monitor/signal-aspects": {
            "post": {
                "summary": "get info on aspects (states) a specific signal supports",
                "description": "",
                "parameters": [],
                "operationId": "monitor-signal-aspects",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_accessory-aspects"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown signal"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_signal"
                            }
                        }
                    },
                    "description": "The name/ID of the signal"
                }
            }
        },
        "/monitor/segments": {
            "get": {
                "summary": "get info on segments",
                "description": "Get info on segments (ID, and, if occupied, who/what is occupying them)",
                "parameters": [],
                "operationId": "monitor-segments",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_segments"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/reversers": {
            "get": {
                "summary": "get info on reversers",
                "description": "Get info on reversers (ID, state)",
                "parameters": [],
                "operationId": "monitor-reversers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_reversers"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message or unable to get reverser state update"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/peripherals": {
            "get": {
                "summary": "get info on peripherals",
                "description": "Get info on peripherals (ID, state ID, state value)",
                "parameters": [],
                "operationId": "monitor-peripherals",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_peripherals"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/verification-option": {
            "get": {
                "summary": "get the current verification option setting",
                "description": "",
                "parameters": [],
                "operationId": "monitor-verification-option",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_verification-option"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/verification-url": {
            "get": {
                "summary": "get the current verification url",
                "description": "",
                "parameters": [],
                "operationId": "monitor-verification-url",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_verification-url"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/granted-routes": {
            "get": {
                "summary": "get info on granted routes",
                "description": "Get info on granted routes, with ID of route and the train (ID) they are granted to",
                "parameters": [],
                "operationId": "monitor-granted-routes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_granted-routes"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {}
            }
        },
        "/monitor/route": {
            "post": {
                "summary": "get info on a specific route",
                "description": "Get (detailed) info on a specific route, including conflicting route IDs etc.; reply can be quite big",
                "parameters": [],
                "operationId": "monitor-route",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reply_route"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/common_feedback"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown route"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Server unable to build reply message or other internal error"
                    },
                    "503": {
                        "description": "SWTbahn not running"
                    }
                },
                "security": [],
                "callbacks": {},
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/param_route-id"
                            }
                        }
                    },
                    "description": "The name/ID of the route"
                }
            }
        }
    },
    "security": [],
    "servers": [],
    "components": {
        "links": {},
        "callbacks": {},
        "schemas": {
            "common_feedback": {
                "title": "common_feedback",
                "description": "simple object with feedback message",
                "type": "object",
                "properties": {
                    "msg": {
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_train": {
                "title": "param_train",
                "type": "object",
                "properties": {
                    "train": {
                        "description": "name of the train",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_verification-url": {
                "title": "param_verification-url",
                "type": "object",
                "properties": {
                    "verification-url": {
                        "description": "verification server url incl. port",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_verification-option": {
                "title": "param_verification-option",
                "type": "object",
                "properties": {
                    "verification-option": {
                        "description": "verification option value string (value should be 'true' or 'false')",
                        "type": "string",
                        "minLength": 1,
                        "pattern": "^(true|false)$"
                    }
                }
            },
            "param_state": {
                "title": "param_state",
                "type": "object",
                "properties": {
                    "state": {
                        "description": "state",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_route-id": {
                "title": "param_route-id",
                "type": "object",
                "properties": {
                    "route-id": {
                        "description": "ID of the route",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_point_state": {
                "title": "param_point_state",
                "type": "object",
                "properties": {
                    "point": {
                        "description": "ID of a point",
                        "type": "string",
                        "minLength": 1
                    },
                    "state": {
                        "description": "desired point state",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_signal_state": {
                "title": "param_signal_state",
                "type": "object",
                "properties": {
                    "signal": {
                        "description": "ID of a signal",
                        "type": "string",
                        "minLength": 1
                    },
                    "state": {
                        "description": "desired signal state",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_peripheral_state": {
                "title": "param_peripheral_state",
                "type": "object",
                "properties": {
                    "peripheral": {
                        "description": "ID of a peripheral",
                        "type": "string",
                        "minLength": 1
                    },
                    "state": {
                        "description": "desired peripheral state",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_interlocker": {
                "title": "param_interlocker",
                "type": "object",
                "properties": {
                    "interlocker": {
                        "description": "ID of an interlocker",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "reply_get-interlocker": {
                "title": "reply_get-interlocker",
                "description": "interlocker",
                "type": "object",
                "properties": {
                    "interlocker": {
                        "description": "the ID of the interlocker that is currently set",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_train_engine": {
                "title": "param_train_engine",
                "type": "object",
                "properties": {
                    "train": {
                        "description": "name of a train",
                        "type": "string",
                        "minLength": 1
                    },
                    "engine": {
                        "description": "name of a (train) engine",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_session-id_grab-id": {
                "title": "param_session-id_grab-id",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "reply_grab-train": {
                "title": "reply_grab-train",
                "type": "object",
                "properties": {
                    "session-id": {
                        "type": "integer",
                        "description": "identifier for the current server session",
                        "minimum": 1
                    },
                    "grab-id": {
                        "type": "integer",
                        "description": "identifier for this grabbing/ownership of a train",
                        "minimum": 0
                    }
                }
            },
            "param_session-id_grab-id_source_destination": {
                "title": "param_session-id_grab-id_source_destination",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "source": {
                        "description": "name of the source signal",
                        "type": "string",
                        "minLength": 1
                    },
                    "destination": {
                        "description": "name of the destination signal",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "reply_request-route": {
                "title": "reply_request-route",
                "type": "object",
                "properties": {
                    "granted-route-id": {
                        "description": "ID of the granted route",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_session-id_grab-id_route-id": {
                "title": "param_session-id_grab-id_route-id",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "route-id": {
                        "description": "ID of the route",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_train_route-id": {
                "title": "param_train_route-id",
                "type": "object",
                "properties": {
                    "train": {
                        "description": "name of a train",
                        "type": "string",
                        "minLength": 1
                    },
                    "route-id": {
                        "description": "ID of the route that shall be considered for driving direction",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "reply_direction": {
                "title": "reply_direction",
                "type": "object",
                "properties": {
                    "direction": {
                        "type": "string",
                        "pattern": "^(forwards|backwards)$",
                        "description": "direction of train considering its location and route to be driven"
                    }
                }
            },
            "param_session-id_grab-id_route-id_mode": {
                "title": "param_session-id_grab-id_route-id_mode",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "route-id": {
                        "description": "ID of the route",
                        "type": "string",
                        "minLength": 1
                    },
                    "mode": {
                        "type": "string",
                        "pattern": "^(manual|automatic)$",
                        "description": "driving mode for the route, either manual or automatic"
                    }
                }
            },
            "param_session-id_grab-id_speed_track-output": {
                "title": "param_session-id_grab-id_speed_track-output",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "speed": {
                        "description": "speed to set the train to, in range [-126,126]",
                        "type": "string",
                        "minLength": 1
                    },
                    "track-output": {
                        "description": "the name of the track output node (usually master)",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_train_speed_track-output": {
                "title": "param_train_speed_track-output",
                "type": "object",
                "properties": {
                    "train": {
                        "description": "name of a train",
                        "type": "string",
                        "minLength": 1
                    },
                    "speed": {
                        "description": "speed to set the train to, in range [-126,126]",
                        "type": "string",
                        "minLength": 1
                    },
                    "track-output": {
                        "description": "the name of the track output node (usually master)",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_session-id_grab-id_speed_track-output__for-calibrated-speed": {
                "title": "param_session-id_grab-id_speed_track-output__for-calibrated-speed",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "speed": {
                        "description": "speed to set the train to, in range [-9,9], depending on the calibration levels configured for the grabbed train",
                        "type": "string",
                        "minLength": 1
                    },
                    "track-output": {
                        "description": "the name of the track output node (usually master)",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_session-id_grab-id_track-output": {
                "title": "param_session-id_grab-id_track-output",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "track-output": {
                        "description": "the name of the track output node (usually master)",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_session-id_grab-id_peripheral_state_track-output": {
                "title": "param_session-id_grab-id_peripheral_state_track-output",
                "type": "object",
                "properties": {
                    "session-id": {
                        "description": "session-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "grab-id": {
                        "description": "grab-id",
                        "type": "string",
                        "minLength": 1
                    },
                    "peripheral": {
                        "description": "ID of the train peripheral",
                        "type": "string",
                        "minLength": 1
                    },
                    "state": {
                        "description": "desired peripheral state (either 0 (off) or 1 (on))",
                        "type": "string",
                        "minLength": 1
                    },
                    "track-output": {
                        "description": "the name of the track output node (usually master)",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_signal": {
                "title": "param_signal",
                "type": "object",
                "properties": {
                    "signal": {
                        "description": "ID of a signal",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "param_point": {
                "title": "param_point",
                "type": "object",
                "properties": {
                    "point": {
                        "description": "ID of a point",
                        "type": "string",
                        "minLength": 1
                    }
                }
            },
            "reply_route": {
                "title": "reply_route",
                "description": "Info on a specific route",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the route",
                        "minLength": 1
                    },
                    "source_signal": {
                        "type": "string",
                        "minLength": 1
                    },
                    "destination_signal": {
                        "type": "string",
                        "minLength": 1
                    },
                    "orientation": {
                        "type": "string",
                        "pattern": "^(anticlockwise|clockwise)$"
                    },
                    "length": {
                        "type": "number",
                        "description": "length, usually in centimeters (depends on config)"
                    },
                    "path": {
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": false,
                        "description": "path of the route, in order of intended traversal, including signals that are passed",
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    "sections": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    "signals": {
                        "type": "array",
                        "minItems": 2,
                        "description": "Includes at least source and destination signals, plus any passed non-distant signals",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    "points": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    "conflicting_route_ids": {
                        "type": "array",
                        "minItems": 0,
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    "granted_conflicting_route_ids": {
                        "type": "array",
                        "minItems": 0,
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    "clear": {
                        "type": "boolean"
                    },
                    "granted_to_train": {
                        "type": "string",
                        "minLength": 0,
                        "description": "Contains name of the train if the route is currently granted, otherwise empty"
                    }
                }
            },
            "reply_granted-routes": {
                "title": "reply_granted-routes",
                "description": "List of granted routes, each entry has the route ID and name of train which the route is granted to",
                "type": "object",
                "properties": {
                    "granted-routes": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "train": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            }
                        }
                    }
                }
            },
            "reply_verification-url": {
                "title": "reply_verification-url",
                "description": "Verification Server URL",
                "type": "object",
                "properties": {
                    "verification-url": {
                        "type": "string",
                        "minLength": 0
                    }
                }
            },
            "reply_verification-option": {
                "title": "reply_verification-option",
                "description": "State of verification option, i.e., whether it is enabled or disabled",
                "type": "object",
                "properties": {
                    "verification-enabled": {
                        "type": "boolean"
                    }
                }
            },
            "reply_peripherals": {
                "title": "reply_peripherals",
                "description": "List of peripherals, with their identifier and info on their state id and state value",
                "type": "object",
                "properties": {
                    "peripherals": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "state-id": {
                                    "type": "string",
                                    "minLength": 0
                                },
                                "state-value": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "reply_reversers": {
                "title": "reply_reversers",
                "description": "List of reversers of the platform with their state",
                "type": "object",
                "properties": {
                    "reversers": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "state": {
                                    "type": "string",
                                    "pattern": "^(on|off|unknown)$"
                                }
                            }
                        }
                    }
                }
            },
            "reply_segments": {
                "title": "reply_segments",
                "description": "List of segments, with info on occupancy per segment if it is occupied",
                "type": "object",
                "properties": {
                    "segments": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "required": [
                                "id"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "occupied-by": {
                                    "description": "list of occupiers (names of train(s) or 'unknown' if occupier is not identifiable)",
                                    "type": "array",
                                    "minItems": 1,
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "reply_point-details": {
                "title": "reply_point-details",
                "description": "Detailed information on a point",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "aspects": {
                        "type": "array",
                        "minItems": 0,
                        "$comment": "currently allows answers with no aspects in the list, can occur if low-level querying of aspects fails",
                        "description": "list of aspects, i.e., states, that this point can be set to",
                        "items": {
                            "type": "string"
                        }
                    },
                    "state": {
                        "type": "string",
                        "minLength": 0,
                        "$comment": "not sure if we may have an empty state in some non-erronous circumstance"
                    },
                    "segment": {
                        "type": "string",
                        "minLength": 1
                    },
                    "occupied": {
                        "type": "boolean"
                    },
                    "target_state_reached": {
                        "type": "boolean",
                        "$comment": "This is optional, as DCC-accessories (so possibly points) don't provide this info. True if execution state is reached or reached_verified, otherwise false."
                    }
                },
                "required": [
                    "id",
                    "aspects",
                    "state",
                    "segment",
                    "occupied"
                ]
            },
            "reply_signals": {
                "title": "reply_signals",
                "description": "List of signals, consisting of the signal ID and its state",
                "type": "object",
                "properties": {
                    "signals": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "state": {
                                    "type": "string",
                                    "minLength": 0
                                }
                            }
                        }
                    }
                }
            },
            "reply_points": {
                "title": "reply_points",
                "description": "List of points, consisting of the point ID, its state, and the target_state_reached status if available",
                "type": "object",
                "properties": {
                    "points": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "required": [
                                "id",
                                "state"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "state": {
                                    "type": "string",
                                    "minLength": 0
                                },
                                "target_state_reached": {
                                    "type": "boolean",
                                    "$comment": "This is optional, as DCC-accessories (so possibly points) don't provide this info. True if execution state is reached or reached_verified, otherwise false."
                                }
                            }
                        }
                    }
                }
            },
            "reply_track-outputs": {
                "title": "reply_track-outputs",
                "description": "List of track outputs with their identifier and their state",
                "type": "object",
                "properties": {
                    "track-outputs": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "state": {
                                    "type": "string",
                                    "minLength": 0
                                }
                            }
                        }
                    }
                }
            },
            "reply_interlockers": {
                "title": "reply_interlockers",
                "description": "List of interlocker identifiers",
                "type": "object",
                "properties": {
                    "interlockers": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    }
                }
            },
            "reply_engines": {
                "title": "reply_engines",
                "description": "List of train engine identifiers (i.e., those of available train behaviour models, not physical trains)",
                "type": "object",
                "properties": {
                    "engines": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    }
                }
            },
            "reply_train-peripherals": {
                "title": "reply_train-peripherals",
                "description": "List of peripherals of a train with their state",
                "type": "object",
                "properties": {
                    "train-peripherals": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "state": {
                                    "type": "string",
                                    "pattern": "^(on|off|unknown)$"
                                }
                            }
                        }
                    }
                }
            },
            "reply_train-states": {
                "title": "reply_train-states",
                "description": "List of train states",
                "type": "object",
                "train-states": {
                    "type": "array",
                    "uniqueItems": true,
                    "minItems": 0,
                    "items": {
                        "properties": {
                            "id": {
                                "type": "string",
                                "minLength": 1
                            },
                            "grabbed": {
                                "type": "boolean"
                            },
                            "orientation": {
                                "type": "string",
                                "pattern": "^(left|right)$"
                            },
                            "direction": {
                                "type": "string",
                                "pattern": "^(forwards|backwards)$"
                            },
                            "speed_step": {
                                "type": "number"
                            },
                            "detected_kmh_speed": {
                                "type": "number",
                                "$comment": "Some trains don't report their km/h speed; in that case the value is 0 or this field is not present"
                            },
                            "route_id": {
                                "type": "string",
                                "$comment": "empty string or not present if no route is granted to this train. Otherwise route id.",
                                "minLength": 0
                            },
                            "on_track": {
                                "type": "boolean"
                            },
                            "occupied_segments": {
                                "type": "array",
                                "$comment": "occupied_segments is only included if on_track is true.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "occupied_blocks": {
                                "type": "array",
                                "$comment": "occupied_blocks is only included if on_track is true.",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "reply_train-state": {
                "title": "reply_train-state",
                "description": "state of a train",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "grabbed": {
                        "type": "boolean"
                    },
                    "orientation": {
                        "type": "string",
                        "pattern": "^(left|right)$"
                    },
                    "direction": {
                        "type": "string",
                        "pattern": "^(forwards|backwards)$"
                    },
                    "speed_step": {
                        "type": "number"
                    },
                    "detected_kmh_speed": {
                        "type": "number",
                        "$comment": "Some trains don't report their km/h speed; in that case the value is 0 or this field is not present"
                    },
                    "route_id": {
                        "type": "string",
                        "$comment": "empty string or not present if no route is granted to this train. Otherwise route id.",
                        "minLength": 0
                    },
                    "on_track": {
                        "type": "boolean"
                    },
                    "occupied_segments": {
                        "type": "array",
                        "$comment": "occupied_segments is only included if on_track is true.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "occupied_blocks": {
                        "type": "array",
                        "$comment": "occupied_blocks is only included if on_track is true.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "grabbed",
                    "orientation",
                    "direction",
                    "speed_step",
                    "on_track"
                ]
            },
            "reply_trains": {
                "title": "reply_trains",
                "description": "List of trains, each entry has train ID, grabbed status and on_track status",
                "type": "object",
                "properties": {
                    "trains": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 0,
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "grabbed": {
                                    "type": "boolean"
                                },
                                "on_track": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                }
            },
            "reply_platform-name": {
                "title": "reply_platform-name",
                "type": "object",
                "properties": {
                    "platform-name": {
                        "type": "string",
                        "description": "name of the SWTbahn (platform) which is being operated",
                        "minLength": 1
                    }
                }
            },
            "reply_accessory-aspects": {
                "title": "reply_accessory-aspects",
                "description": "List of aspects (i.e., states) that a specific accessory (e.g., point, signal) can be set to",
                "type": "object",
                "properties": {
                    "aspects": {
                        "type": "array",
                        "minItems": 0,
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "minLength": 1
                        }
                    }
                }
            }
        }
    }
}