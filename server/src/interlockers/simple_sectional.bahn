# Sectional Interlocker, Version 1.1

# Method for granting or rejecting a route request from a
# train driver. A route is defined by a source signal and 
# a destination signal
def request_route(string src_signal_id, string dst_signal_id, string train_id): string
    # 1. Get all routes that go from src_signal_id to dst_signal_id
    string route_ids[] = get routes from src_signal_id to dst_signal_id
    if route_ids.len == 0
        return "no_routes"
    end

    # Optional step: Find the shortest route
    string route_id = get_shortest_route(route_ids)

    # 2. Check whether the route can be granted
    # TODO: If not grantable, try the next shortest route 
    if !route_is_grantable(route_id, train_id)
        return "not_grantable"
    end

    # 3. Check whether the route is physically available
    # TODO: If not clear, try the next shortest route
    if !route_is_clear(route_id)
        return "not_clear"
    end

    # 4. Grant the route to the train and mark it unavailable
    grant route_id to train_id

    # 5. Set the points to their required positions
    set_points(route_id)

    # 6. Set the signals to their required aspects
    set_signals(route_id)

    return route_id
end


# For a given route ID, checks whether the given route  
# and conflicting routes have already been granted
def route_is_grantable(string route_id, string train_id): bool
    # Check whether the given route is available
    if is route_id not available
        return false
    end

    # Retrieve all routes that conflict with route ID
    string conflict_routes[] = get config route.conflicts route_id
    
    # Iterate through each conflicting route
    for string conflict_id in conflict_routes
        # Retrieve the ID of the train that has been granted 
        # the conflicting route. If the conflicting route has
        # not been granted, the train ID would be empty
        string conflict_train_id = get config route.train conflict_id
        
        # Route ID is not grantable if a conflicting route 
        # has already been granted to a train
        if conflict_train_id != ""
            # Check whether route_id is grantable under the
            # sectional route release strategy 
            if !is_sectional_route_okay(route_id, conflict_id)
                return false
            end
        end
    end

    return true
end


# For requested route requested_route_id and already granted route granted_route_id,
# performs sectional interlocking check.
# Returns true if requested_route_id is good-to-grant, otherwise returns false. 
def is_sectional_route_okay(string requested_route_id, string granted_route_id) : bool
    # 1. Determine the segments where the two routes intersect.
    string requested_path[] = get config route.path requested_route_id
    string granted_path[] = get config route.path granted_route_id
    
    for string requested_item in requested_path
        # 2. Check for matching segment IDs between the requested and granted paths
        if (is requested_item a_segment)
            for string granted_item in granted_path
                if requested_item == granted_item
                    # 3. Check whether any signals guarding entry into the critical section
                    # are in aspect GO or SHUNT. If so, return false.
                    # Matching segments -> critical section
                    if is_entry_signals_go_or_shunt_brute_force(requested_item)
                        return false
                    end
                    
                    # 4. In the path of granted_route_id, check whether any segments between
                    # the critical section and the signal before the critical section 
                    # are occupied. If so, return false.
                    if is_occupied_from_preceding_signal_to(granted_item, granted_route_id)
                        return false
                    end
                end
            end
        end
    end
    
    return true
end


# In the given route ID, checks whether any segment between the 
# seg_id and the signal preceding seg_id is occupied. 
# If so, returns false. Otherwise returns true.
def is_occupied_from_preceding_signal_to(string seg_id, string route_id): bool
    if route_id == "" || seg_id == ""
        return false
    end
    # 1. Determine preceding signal index and index of seg_id
    string route_path[] = get config route.path route_id
    int seg_id_occurrences_counter = 0
    int seg_id_index_in_path = 0
    int current_path_index = 0
    int preceding_signal_index_in_path = 0
    for string path_item in route_path
        if path_item == seg_id
            seg_id_occurrences_counter += 1
            seg_id_index_in_path = current_path_index
        end
        if (is path_item a_signal) && seg_id_index_in_path == 0
            preceding_signal_index_in_path = current_path_index
        end
        current_path_index += 1
    end
    # 2.
    # if seg_id_occurrences_counter is == 0, seg_id did not occur in the route.
    # if seg_id_occurrences_counter is > 1, seg_id appeared twice 
    #    -> preceding_signal_index_in_path will be the index
    #       of the most recent signal before the *first*
    #       occurrence of seg_id. seg_id_index_in_path will be the index
    #       of the last occurrence of seg_id in the path.
    #       Occupancy is checked between these two indexes 
    #       -> checks more than strictly necessary. 
    if seg_id_occurrences_counter == 0
        # If seg_id does not occur, no entry signal to its section can be GO or SHUNT. 
        return false
    end
    # 3. Check for occupied segments between preceding signal and seg_id
    int current_path_index_2 = 0
    for string path_item_2 in route_path
        if current_path_index_2 > preceding_signal_index_in_path && current_path_index_2 <= seg_id_index_in_path
            if (is path_item_2 a_segment) && (is path_item_2 occupied)
                return true
            end
        end
        current_path_index_2 += 1
    end
    return false
end


# For a given segment, determines if any signals guarding entry
# to it are in aspect GO or SHUNT. If so, returns true. Else returns false.
def is_entry_signals_go_or_shunt_brute_force(string seg_id) : bool
    # 1. Initialise string array. Not sure if the empty elements are necessary, as the size seems
    # to always be set to 1024 internally when translated to SCTX and C. 
    # But not taking any chances, so init with longest+1 empty strings. 
    string guarding_signals[] = {"","","","","","","","","","","","","",""}
    if seg_id == "seg1" || seg_id == "seg2" || seg_id == "seg3" # block 1
        guarding_signals = {"signal5", "signal19", "signal45", "signal47", "signal49", "signal51", "signal9", "signal14", "signal24", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg6" || seg_id == "seg7a" || seg_id == "seg7b" || seg_id == "seg8" # block 2
        guarding_signals = {"signal8", "signal4a"}
    end
    if seg_id == "seg11" || seg_id == "seg12" || seg_id == "seg13" # block 3
        guarding_signals =  {"signal7a", "signal22a", "signal35a", "signal46a", "signal48a", "signal50a", "signal53a", "signal1", "signal11", "signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg15" || seg_id == "seg16a" || seg_id == "seg16b" || seg_id == "seg17" # block 4
        guarding_signals =  {"signal1", "signal9", "signal15", "signal26"}
    end
    if seg_id == "seg21b" || seg_id == "seg22" || seg_id == "seg23" # block 5
        guarding_signals =  {"signal9", "signal14", "signal24", "signal32", "signal37", "signal39", "signal41", "signal19", "signal45", "signal47", "signal49", "signal51"}
    end
    if seg_id == "seg26" || seg_id == "seg27" || seg_id == "seg28" # block 6
        guarding_signals =  {"signal4a", "signal18a", "signal21", "signal43"}
    end
    if seg_id == "seg30" || seg_id == "seg31a" || seg_id == "seg31b" || seg_id == "seg32" # block 7 (platform4)
        guarding_signals =  {"signal8", "signal20", "signal23", "signal36"}
    end
    if seg_id == "seg36" || seg_id == "seg37" || seg_id == "seg38" # block 8
        guarding_signals =  {"signal22a", "signal35a", "signal46a", "signal48a", "signal50a", "signal53a", "signal1", "signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg42a" || seg_id == "seg42b" # block 9
        guarding_signals =  {"signal9", "signal24", "signal37", "signal1", "signal15", "signal26"}
    end
    if seg_id == "seg50" # block 10
        guarding_signals =  {"signal15", "signal26", "signal28", "signal30", "signal9", "signal24", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg47" || seg_id == "seg46" || seg_id == "seg45" # block 11 (platform3)
        guarding_signals =  {"signal9", "signal14", "signal24", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg56" || seg_id == "seg55" || seg_id == "seg54" # block 12 (platform2)
        guarding_signals =  {"signal9", "signal24", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg59" || seg_id == "seg58" || seg_id == "seg57" # block 13 (platform1)
        guarding_signals =  {"signal9", "signal24", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg64" || seg_id == "seg63" || seg_id == "seg62" || seg_id == "seg61" # block 14 + seg61
        guarding_signals =  {"signal8", "signal23", "signal36", "signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg67" || seg_id == "seg68" || seg_id == "seg69" # block 15
        guarding_signals =  {"signal22a", "signal35a", "signal46a", "signal48a", "signal50a", "signal53a", "signal1", "signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg71" || seg_id == "seg72" || seg_id == "seg73" # block 16 (platform7)
        guarding_signals =  {"signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg74" || seg_id == "seg75" || seg_id == "seg76" # block 17 (platform6)
        guarding_signals =  {"signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg79" || seg_id == "seg78b" || seg_id == "seg78a" || seg_id == "seg77" # block 18 (platform5)
        guarding_signals =  {"signal20"}
    end
    if seg_id == "seg81" || seg_id == "seg82a" || seg_id == "seg82b" || seg_id == "seg83" # block 19
        guarding_signals =  {"signal8", "signal23", "signal36", "signal4a", "signal18a"}
    end
    if seg_id == "seg86" || seg_id == "seg87a" || seg_id == "seg87b" || seg_id == "seg88" # block 20
        guarding_signals =  {"signal8", "signal23", "signal36", "signal4a", "signal18a"}
    end
    if seg_id == "seg90" || seg_id == "seg91a" || seg_id == "seg91b" || seg_id == "seg92" # block 21
        guarding_signals =  {"signal8", "signal23", "signal36", "signal4a", "signal18a"}
    end
    if seg_id == "seg93" || seg_id == "seg94a" || seg_id == "seg94b" || seg_id == "seg95" # block 22
        guarding_signals =  {"signal8", "signal23", "signal36", "signal4a", "signal18a"}
    end
    if seg_id == "seg4" # p1
        guarding_signals =  {"signal4a", "signal5", "signal19", "signal45", "signal47", "signal49", "signal51"}
    end
    if seg_id == "seg5" # p2
        guarding_signals =  {"signal4a", "signal5", "signal19", "signal45", "signal47", "signal49"}
    end
    if seg_id == "seg9" # p3
        guarding_signals =  {"signal7a", "signal8", "signal22a", "signal46a", "signal48a", "signal50a"}
    end
    if seg_id == "seg10" # p4
        guarding_signals =  {"signal7a", "signal8", "signal22a", "signal35a", "signal46a", "signal48a", "signal50a", "signal53a"}
    end
    if seg_id == "seg14" # p5
        guarding_signals =  {"signal1", "signal9", "signal11", "signal15", "signal26", "signal28", "signal30"}
    end
    if seg_id == "seg18" # p6
        guarding_signals =  {"signal1", "signal9", "signal14", "signal15", "signal24", "signal26", "signal37"}
    end
    if seg_id == "seg19" # p7
        guarding_signals =  {"signal1", "signal9", "signal14", "signal15", "signal24", "signal26", "signal37"}
    end
    if seg_id == "seg24" # p8
        guarding_signals =  {"signal4a", "signal18a", "signal19", "signal45", "signal47", "signal49", "signal51"}
    end
    if seg_id == "seg25" # p9
        guarding_signals =  {"signal4a", "signal18a", "signal19", "signal45", "signal47", "signal49", "signal51"}
    end
    if seg_id == "seg29" # p10
        guarding_signals =  {"signal20", "signal21", "signal43"}
    end
    if seg_id == "seg33" # p11
        guarding_signals =  {"signal8", "signal22a", "signal23", "signal36", "signal46a", "signal48a", "signal50a"}
    end
    if seg_id == "seg34" # p12
        guarding_signals =  {"signal8", "signal22a", "signal23", "signal35a", "signal36", "signal46a", "signal48a", "signal50a", "signal53a"}
    end
    if seg_id == "seg35" # p13
        guarding_signals =  {"signal22a", "signal23", "signal35a", "signal36", "signal46a", "signal48a", "signal50a", "signal53a"}
    end
    if seg_id == "seg39" # p14
        guarding_signals =  {"signal1", "signal15", "signal24", "signal26", "signal28", "signal30", "signal37"}
    end
    if seg_id == "seg40" # p15
        guarding_signals =  {"signal1", "signal9", "signal15", "signal24", "signal26", "signal28", "signal30", "signal37"}
    end
    if seg_id == "seg41" # p16
        guarding_signals =  {"signal1", "signal9", "signal15", "signal24", "signal26", "signal28", "signal30", "signal37"}
    end
    if seg_id == "seg43" # p17
        guarding_signals =  {"signal1", "signal9", "signal15", "signal24", "signal26", "signal37"}
    end
    if seg_id == "seg21a" # p18a
        guarding_signals =  {"signal9", "signal14", "signal15", "signal24", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg44" # p18b
        guarding_signals =  {"signal9", "signal14", "signal15", "signal24", "signal26", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg48" # p19
        guarding_signals =  {"signal9", "signal15", "signal24", "signal26", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg49" # p20
        guarding_signals =  {"signal9", "signal15", "signal24", "signal26", "signal28", "signal30", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg51" # p21
        guarding_signals =  {"signal9", "signal15", "signal24", "signal26", "signal28", "signal30", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg53" # p22
        guarding_signals =  {"signal9", "signal24", "signal28", "signal30", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg60" # p23
        guarding_signals =  {"signal15", "signal26", "signal28", "signal30", "signal32"}
    end
    if seg_id == "seg66" # p24
        guarding_signals =  {"signal8", "signal23", "signal35a", "signal36", "signal53a"}
    end
    if seg_id == "seg70" # p25
        guarding_signals =  {"signal15", "signal26", "signal28", "signal30", "signal39", "signal41"}
    end
    if seg_id == "seg80" # p26
        guarding_signals =  {"signal4a", "signal18a", "signal45", "signal47", "signal49"}
    end
    if seg_id == "seg84" # p27
        guarding_signals =  {"signal8", "signal23", "signal36", "signal46a", "signal48a", "signal50a"}
    end
    if seg_id == "seg85" # p28
        guarding_signals =  {"signal4a", "signal18a", "signal47", "signal49"}
    end
    if seg_id == "seg89" # p29
        guarding_signals =  {"signal8", "signal23", "signal36", "signal48a", "signal50a"}
    end
    if seg_id == "seg52" # crossing1
        guarding_signals =  {"signal9", "signal15", "signal24", "signal26", "signal28", "signal30", "signal32", "signal37", "signal39", "signal41"}
    end
    if seg_id == "seg20" # crossing2
        guarding_signals =  {"signal9", "signal14", "signal15", "signal24", "signal26", "signal37"}
    end
    # 2. Check fall-through
    if guarding_signals[0] == ""
        return false
    end
    # 3. Check length (shouldn't be necessary, but precaution.)
    if guarding_signals.len == 0
        return false
    end
    # 4. Check the state of all guarding signals.
    for string sig in guarding_signals
        string sig_state = get state sig
        if sig_state == "go" || sig_state == "shunt"
            return true
        end
    end
    return false
end


# Returns whether route ID is physically ready for use:
# All route signals are in Stop aspect, all possible entries
# into the route are protected by signals in the Stop aspect,
# and all blocks are unoccupied
def route_is_clear(string route_id): bool
    # Check that all signals along route ID are in the Stop aspect.
    # 1. Get all the signals along route ID, including the source and
    #    destination signals
    string signal_ids[] = get config route.route_signals route_id
    
    # 2. Iterate through the signals
    for string signal_id in signal_ids
        # 3. Check that each signal is in the Stop aspect
        string signal_state = get state signal_id
        if signal_state != "stop"
            return false
        end
    end

    # TODO: Check that the signals of all possible entries into 
    # route ID are in the Stop aspect

    # Check that all the segments along route ID are unoccupied
    # 1. Get all segments and signals along route ID
    string item_ids[] = get config route.path route_id
    
    # 2. Iterate through the segments and signals
    for string item_id in item_ids
        # 3. If the item is a segment, check whether it is occupied
        if (is item_id a_segment) && (is item_id occupied)
            return false
        end
    end

    return true
end


# For a given route ID, the points along the route
# are set to their required positions
def set_points(string route_id)
    # Get all the points along route ID
    string point_ids[] = get config route.route_points route_id
    
    # Iterate through each point
    for string point_id in point_ids
        # Get the required position of the point
        string pos = get position point_id in route_id
        
        # Set the point to the required position
        if pos == "normal"
            set state point_id to normal
        else
            set state point_id to reverse
        end
    end
    
    # TODO: Wait 1 sec for the points to physically move
    # into position
end


# For a given route ID, all signals along the route, except
# for the destination signal, are set to the Go aspect
def set_signals(string route_id)
    # Get the destination signal of route ID
    string destination_id = get config route.destination route_id

    # Get all the signals along route ID, including the source and
    # destination signals
    string signal_ids[] = get config route.route_signals route_id

    # Iterate through the signals
    for string signal_id in signal_ids
        # Set each signal (except for the destination) to the Go aspect
        if signal_id != destination_id
            string signal_type = get config signal.type signal_id
            if signal_type == "shunting"
                set state signal_id to shunt
            else
                set state signal_id to go
            end
        end
    end
end


# Method for automating the driving of a train along a granted route
def drive_route(string route_id, string train_id, string segment_ids[])
    # Get block 
    string block_id = get_block(route_id, segment_ids)
    
    if block_id != ""
        # Protect the block by controlling the immediate signals
        string pre_block = get_previous_block(route_id, block_id)
        if pre_block != ""
            # Get the block's entry signal 
            string signal_ids[] = get config block.block_signals pre_block
            for string signal_id in signal_ids
                set state signal_id to stop
            end
        end
    end
end

